from django.test import TestCase
import logging

#from django.urls import reverse
from django.contrib.auth import get_user_model
from rest_framework.reverse import reverse
from rest_framework import status
from rest_framework.test import APITestCase

logger = logging.getLogger('cyborgbackup')
logger.setLevel(logging.CRITICAL)

class CyborgbackupApiTest(APITestCase):
    fixtures = ["settings.json", "tests.json"]
    user_login = 'admin@cyborg.local'
    user_pass = 'adminadmin'

    def test_page_not_found(self):
        response = self.client.get('/notFound', format='json')
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)

    def test_api_access_api(self):
        url = reverse('api:api_root_view')
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['current_version'], '/api/v1/')

    # For the moment, index file are generated by nodeJs system
    # def test_ui_access_ui(self):
    #     url = reverse('ui:index')
    #     response = self.client.get(url, format='json')
    #     self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_api_access_swagger(self):
        url = reverse('api:swagger_view')
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_api_access_login(self):
        url = reverse('api:login')
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_api_access_logout(self):
        url = reverse('api:logout')
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_302_FOUND)

    def test_api_v1_access_root(self):
        url = reverse('api:api_v1_root_view', kwargs={'version': 'v1'})
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['ping'], '/api/v1/ping/')

    def test_api_v1_access_ping(self):
        url = reverse('api:api_v1_ping_view', kwargs={'version': 'v1'})
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['version'], '1.0')
        self.assertEqual(response.data['ping'], 'pong')

    def test_api_v1_access_config_without_auth(self):
        url = reverse('api:api_v1_config_view', kwargs={'version': 'v1'})
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

    def test_api_v1_access_config_with_auth(self):
        url = reverse('api:api_v1_config_view', kwargs={'version': 'v1'})
        user = get_user_model().objects.first()
        self.client.force_login(user)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['time_zone'], 'UTC')
        self.assertFalse(response.data['debug'])
        self.assertFalse(response.data['sql_debug'])
        self.assertEqual(response.data['version'], '1.0')

    def test_api_v1_access_me(self):
        url = reverse('api:user_me_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 1)
        self.assertEqual(response.data['results'][0]['type'], 'user')
        self.assertTrue(response.data['results'][0]['is_superuser'])
        self.assertEqual(response.data['results'][0]['email'], 'admin@cyborg.local')

    def test_api_v1_access_users(self):
        url = reverse('api:user_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 1)

    def test_api_v1_access_settings(self):
        url = reverse('api:setting_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 13)

    def test_api_v1_access_clients(self):
        url = reverse('api:client_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 1)

    def test_api_v1_access_schedules(self):
        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 1)

    def test_api_v1_access_repositories(self):
        url = reverse('api:repository_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 1)

    def test_api_v1_access_policies(self):
        url = reverse('api:policy_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 1)

    def test_api_v1_access_catalogs(self):
        url = reverse('api:catalog_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 0)

    def test_api_v1_access_stats(self):
        url = reverse('api:stats', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data, [])

    def test_api_v1_get_schedule_1(self):
        url = reverse('api:schedule_detail', kwargs={'version': 'v1', 'pk': 1})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['id'], 1)
        self.assertEqual(response.data['crontab'], "0 5 * * MON *")
        self.assertFalse(response.data['enabled'])

    def test_api_v1_access_schedules_create_schedule(self):
        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        data = {"name": "Test Create Schedule", "crontab": "1 1 1 1 * *"}
        response = self.client.post(url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(response.data['crontab'], "1 1 1 1 * *")
        self.assertEqual(response.data['name'], "Test Create Schedule")
        self.assertTrue(response.data['enabled'])

    def test_api_v1_access_schedules_after_creation(self):
        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        data = {"name": "Test List Schedule", "crontab": "1 1 1 1 * *"}
        response = self.client.post(url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertNotEqual(response.data['count'], 0)

    def test_api_v1_access_schedules_update_schedule(self):
        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        data = {"name": "Test Update Schedule", "crontab": "2 2 2 2 * *"}
        response = self.client.post(url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        id = response.data['id']
        url = response.data['url']

        url = reverse('api:schedule_detail', kwargs={'version': 'v1', 'pk': response.data['id']})
        self.client.login(username=self.user_login, password=self.user_pass)
        data = {"enabled": False}
        response = self.client.patch(url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['id'], id)
        self.assertEqual(response.data['crontab'], "2 2 2 2 * *")
        self.assertEqual(response.data['name'], "Test Update Schedule")
        self.assertEqual(response.data['url'], url)
        self.assertFalse(response.data['enabled'])

    def test_api_v1_access_schedules_delete_schedule(self):
        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        count_before_delete = response.data['count']

        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        data = {"name": "Test Delete Schedule", "crontab": "1 1 1 1 * *"}
        response = self.client.post(url, data=data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        url = reverse('api:schedule_detail', kwargs={'version': 'v1', 'pk': response.data['id']})
        self.client.login(username=self.user_login, password=self.user_pass)
        data = {"enabled": False}
        response = self.client.delete(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)

        url = reverse('api:schedule_list', kwargs={'version': 'v1'})
        self.client.login(username=self.user_login, password=self.user_pass)
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        count_after_delete = response.data['count']

        self.assertEqual(count_before_delete, count_after_delete)
